Why Flexbox - 

a lot of flexibility
arrange items
spacing
alignment
order
bootstrap 4 is built on the top of flex layout 

___________________________________________________________________________________________________________________

Terminology - 

Flex Container -
Parent container 

Flex Items - 
Children elements

Example -

<div class="container">
  <div>item 1</div>
  <div>item 1</div>
  <div>item 1</div>
</div>
___________________________________________________________________________________________________________________
Flexbox axis - 
Main axis  - horizontal 
Cross axis - verticle

___________________________________________________________________________________________________________________
Flex container properties - 

display - 
mandatory to work with flex containers.
creates either block level or inline level flex container.

display: flex;
display: inline-flex;
___________________________________________________________________________________________________________________

flex-direction - 
defines the direction in which the flex items are placed in the container.
by default the main axis flows from feft to right.

flex direction has four values - 

flex-direction: row;
flex-direction: row-reverse;
flex-direction: column;
flex-direction: column-reverse;
___________________________________________________________________________________________________________________

flex-wrap - 
used to control the wrapping of items in a container.
by default all the flex items in a container try to fit in a single line, if there is not enough space the items simply overflow. If i reduce the browser width items begin to shrink and then no longer in view.
we can fix this by using flex-wrap property.

flex-wrap contains three values -

flex-wrap: nowrap;    default value. no change in UI
flex-wrap: wrap;
flex-wrap: wrap-reverse;
___________________________________________________________________________________________________________________

flex-flow - 
combination of flex-direction and flex-wrap.
flex-flow: <flex-direction><flex-wrap>

flex-direction: row;
flex-wrap: nowrap;

we can use a single flex-flow property in place of above two properties.
we can give any combination of flex-direction and flex-wrap.

flex-flow: row nowrap; (4*3 = 12 combinations)
___________________________________________________________________________________________________________________

justify-content -

defines the alignment of the items along the main axis by default.

justify-content: flex-start; default
justify-content: flex-end;
justify-content: center;
justify-content: space-around;
justify-content: space-between;
justify-content: space-evenly;

If we set flex-direction to column. The items will be aligned vertically.
___________________________________________________________________________________________________________________

align-items - 

suppose we have 5 items in a row.
..............................................
| item 1 | item 2 | item 3 | item 4 | item 5 |    --> row 
..............................................

this entire row will be aligned along cross axis.

align-items can have four values

align-items: stretch; default
align-items: flex-start;
align-items: flex-end;
align-items: baseline;
___________________________________________________________________________________________________________________

align-content - 
defines the alignment of the items along the cross axis.
this works only when there are multile rows of flex items in the container.

suppose we have some items which dosent fit in a container and they will go out of the parent div.
we use flex-wrap peoperty to wrap then in that container. now we will have multile rows, and align content can be applied on these multile rows only.

..............................................
| item 1 | item 2 | item 3 | item 4 | item 5 |    --> row 1
..............................................
..............................................
| item 1 | item 2 | item 3 | item 4 | item 5 |    --> row 2
..............................................
..............................................
| item 1 | item 2 | item 3 | item 4 | item 5 |    --> row 3
..............................................
..............................................
| item 1 | item 2 | item 3 | item 4 | item 5 |    --> row 4
..............................................

align-content can have seven values - 

align-content: stretch;     default
align-content: flex-start; 
align-content: flex-end; 
align-content: center; 
align-content: space-between; 
align-content: space-around; 
___________________________________________________________________________________________________________________

Flex item properties - 

order - 
controls the order in which the item appears in the flex container.
bydefault all the items are arranged in some order.

 <div class="container">
  <div class="flex-item item-1">item 1</div>      1st position
  <div class="flex-item item-2">item 2</div>      2nd position
  <div class="flex-item item-3">item 3</div>      3rd position
  <div class="flex-item item-4">item 4</div>      4th position
  <div class="flex-item item-5">item 5</div>      5th position
</div>
..............................................
| item 1 | item 2 | item 3 | item 4 | item 5 |    
..............................................
|order 0 |order 0 |order 0 |order 0 |order 0 |
..............................................

by default all the items are of order 0. 
when we specifically give order property to item 3.

.item-3{
  order: 1
}
by doing this item 3 will be pushed to end because all items bydefault have an order of 0. 
1 is greater than 0.
..............................................
| item 1 | item 2 | item 4 | item 5 | item 3 |    
..............................................
|order 0 |order 0 |order 0 |order 0 |order 1 |
..............................................
___________________________________________________________________________________________________________________

flex-grow - 
defines the ability for a flex item to grow if necessary.

items only take up the space which is required to for the content. There can me alot of extra space with in the container.

......................................................................................................
| item 1 | item 2 | item 3 | item 4 | item 5 |  <-------------------EXTRA SPACE---------------------->
......................................................................................................

sometimes we dont want those extraspace there, instead of this we want any item/items to take up this exyra space if available.
bydefault all items have have the flex grow value of 0, because of this they dont take up the extra space.

.item-3{
  flex-grow: 1
}
.item-1{
  flex-grow: 3
}

by applying above css, item 3 will take the 25% of the extra space and item 1 will take the 75% of the extra space.

___________________________________________________________________________________________________________________

flex-shrink - 
defines the ability for a flex item to shrink if necessary.
the default value of flex shrink is 1. when we decrease the width of screen all the flex items together shrink.
these items shrink up to a limit and then after these items overflow.
by setting shrink value to 0 we can prevent shrinking.
flex-shrink : 0;

If i apply shrink value to item 2
.item-2{
  flex-shrink: 3
}
when we decrease width if screen item 2 will shrink 3times more.

___________________________________________________________________________________________________________________

flex-basis -
this specifies the initial size of a flex item.
bydefault flex-basis has a value of auto which sets the initial width based on the items content.In our case items width is dependent on the text content .

___________________________________________________________________________________________________________________

flex - 
a shorthand property for <flex-grow> <lex-shrink> & <flex-basis>

.item{
  flex-grow:2;
  flex:shrink:4;
  flex-basis:200px
}

.item{
  flex:2 4 200px;
}
___________________________________________________________________________________________________________________

align-self - 
allows alignment of individual flex items.

default value of align-self is auto.
align-self:auto;
which means the item inherits the property from parent container's align-items value.
if in parent container align-items value is flex-end, then the individual items inside that container will also be set to flex end.

align-self:flex-start;
align-self:flex-end;
align-self:center;
align-self:stretch;
align-self:auto;    -->default value

auto will inherit the value of align-items value from parent container.



___________________________________________________________________________________________________________________



___________________________________________________________________________________________________________________




___________________________________________________________________________________________________________________
___________________________________________________________________________________________________________________


___________________________________________________________________________________________________________________


___________________________________________________________________________________________________________________



___________________________________________________________________________________________________________________



___________________________________________________________________________________________________________________




___________________________________________________________________________________________________________________
